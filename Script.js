const gameState = {
    players: [],
    currentPlayer: null,
    currentQuestion: null,
    gameStarted: false,
    usedQuestions: [],
    scores: {}
};

// Question Database
const questions = {
    funny: [
        "ูุง ุฃุบุฑุจ ุดูุก ุฃููุชู ูู ุญูุงุชูุ",
        "ูู ููุช ุญููุงูุ ุฃู ุญููุงู ุณุชููู ูููุงุฐุงุ",
        "ุงุฐูุฑ ุฃุณูุฃ ูุฐุจุฉ ููุชูุง ููุงูุฏูู",
        "ูุง ุฃุบุฑุจ ุญูู ุฑุฃูุชูุ",
        "ูู ูุงู ุจุฅููุงูู ุฃู ุชููู ูุดููุฑุงู ุจุดูุก ุณุฎููุ ูุงุฐุง ุณููููุ",
        "ุงุฐูุฑ ุดูุฆุงู ุชูุนูู ุนูุฏูุง ุชููู ูุญูุฏุงู ููู ุชูุนูู ุฃูุงู ุงููุงุณ",
        "ูุง ุฃุบุฑุจ ุงุณู ูููู ุฃู ุชุทููู ุนูู ุญููุงูู ุงูุฃูููุ",
        "ูู ูุงู ูุฏูู ููุงุฉ ููุชููุจุ ูุงุฐุง ุณูููู ุงุณููุงุ"
    ],
    embarrassing: [
        "ูุชู ูุงูุช ุขุฎุฑ ูุฑุฉ ุจููุช ูููุงุ",
        "ูุง ุฃูุซุฑ ุดูุก ูุญุฑุฌ ุญุฏุซ ูู ุฃูุงู ุดุฎุต ูุนุฌุจ ุจูุ",
        "ูู ุณุจู ุฃู ุฑูุตุช ุฃูุงู ุงููุฑุขุฉุ ุนูู ุฃู ุฃุบููุฉุ",
        "ูุง ุฃุณูุฃ ูููู ุชุนุฑุถุช ูู ูู ุงููุฏุฑุณุฉุ",
        "ูุชู ูุงูุช ุขุฎุฑ ูุฑุฉ ุชุจููุช ุนูู ููุณูุ",
        "ุงุฐูุฑ ุดูุฆุงู ูุนูุชู ููู ุชุฎุจุฑ ุจู ุฃุญุฏุงู",
        "ูู ุณุจู ุฃู ุฃุญุจุจุช ุดุฎุตุงู ูู ูุจุงุฏูู ุงููุดุงุนุฑุ",
        "ูุง ุฃูุซุฑ ุดูุก ุชุฎุฌู ููู ูู ุดุฎุตูุชูุ"
    ],
    childhood: [
        "ูุง ุฃุฌูู ุฐูุฑูุงุชู ูู ุงูุทูููุฉุ",
        "ูุง ุฃูู ูููุฉ ุชุฐูุฑ ุฃูู ูุทูุชูุงุ",
        "ูู ูุงู ุตุฏููู ุงูููุถู ูู ุงูุทูููุฉุ",
        "ูุง ุงููุนุจุฉ ุงูููุถูุฉ ูุฏูู ุนูุฏูุง ููุช ุทููุงูุ",
        "ูู ููุช ุชุฎุงู ูู ุงููุญูุด ุชุญุช ุงูุณุฑูุฑุ",
        "ูุง ุฃูู ูููู ุดุงูุฏุชู ูู ุงูุณูููุงุ",
        "ูุงุฐุง ููุช ุชุฑูุฏ ุฃู ุชุตุจุญ ุนูุฏูุง ุชูุจุฑุ",
        "ูุง ุฃุณูุฃ ุนูุงุจ ุชูููุชู ูู ูุงูุฏููุ"
    ],
    strange: [
        "ูู ูุงู ุจุฅููุงูู ูุฑุงุกุฉ ุฃููุงุฑ ุดุฎุต ูุงุญุฏ ููุฏุฉ ูููุ ูู ุณุชุฎุชุงุฑุ",
        "ูุง ุฃุบุฑุจ ูุธุฑูุฉ ุชุคูู ุจูุงุ",
        "ูู ุงุณุชุทุนุช ุงูุณูุฑ ุนุจุฑ ุงูุฒููุ ุฅูู ุฃู ูุชุฑุฉ ุณุชุฐูุจุ",
        "ูู ูุงู ุจุฅููุงูู ุงูุชูุงู ููุฉ ุฎุงุฑูุฉ ูุงุญุฏุฉุ ูุงุฐุง ุณุชุฎุชุงุฑุ",
        "ูุง ุฃุบุฑุจ ุดูุก ุชููุฑ ููู ูุจู ุงููููุ",
        "ูู ููุช ุฎุงูุฏุงูุ ูุงุฐุง ุณุชูุนูุ",
        "ูู ุชุคูู ุจูุฌูุฏ ุญูุงุฉ ุนูู ููุงูุจ ุฃุฎุฑูุ",
        "ูู ูุงู ุนููู ุฃู ุชุนูุด ูู ุนุตุฑ ุขุฎุฑุ ุฃู ุนุตุฑ ุณุชุฎุชุงุฑุ"
    ]
};

// Question Types Configuration
const questionTypes = {
    funny: { 
        name: 'ูุถุญู', 
        icon: `<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
                <line x1="9" y1="9" x2="9.01" y2="9"></line>
                <line x1="15" y1="9" x2="15.01" y2="9"></line>
              </svg>`, 
        color: 'bg-yellow-500' 
    },
    embarrassing: { 
        name: 'ูุญุฑุฌ', 
        icon: `<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                <circle cx="12" cy="12" r="3"></circle>
              </svg>`, 
        color: 'bg-red-500' 
    },
    childhood: { 
        name: 'ุงูุทูููุฉ', 
        icon: `<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path>
              </svg>`, 
        color: 'bg-pink-500' 
    },
    strange: { 
        name: 'ุบุฑูุจ', 
        icon: `<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
              </svg>`, 
        color: 'bg-purple-500' 
    }
};

// DOM Elements
let setupPhase, gamePhase, playerInput, addPlayerBtn, playersList, startGameBtn;
let questionTypeContainer, questionText, currentPlayer, nextQuestionBtn, changeQuestionBtn, resetGameBtn, scoresContainer;

// Initialize DOM Elements after page load
document.addEventListener('DOMContentLoaded', () => {
    setupPhase = document.getElementById('setupPhase');
    gamePhase = document.getElementById('gamePhase');
    playerInput = document.getElementById('playerInput');
    addPlayerBtn = document.getElementById('addPlayerBtn');
    playersList = document.getElementById('playersList');
    startGameBtn = document.getElementById('startGameBtn');
    questionTypeContainer = document.getElementById('questionTypeContainer');
    questionText = document.getElementById('questionText');
    currentPlayer = document.getElementById('currentPlayer');
    nextQuestionBtn = document.getElementById('nextQuestionBtn');
    changeQuestionBtn = document.getElementById('changeQuestionBtn');
    resetGameBtn = document.getElementById('resetGameBtn');
    scoresContainer = document.getElementById('scoresContainer');

    // Add Event Listeners
    addPlayerBtn.addEventListener('click', addPlayer);
    playerInput.addEventListener('keypress', handleKeyPress);
    startGameBtn.addEventListener('click', startNextRound);
    nextQuestionBtn.addEventListener('click', markAnswered);
    changeQuestionBtn.addEventListener('click', startNextRound);
    resetGameBtn.addEventListener('click', resetGame);
    
    // Initialize UI
    updateStartButtonState();
});

// Functions
function addPlayer() {
    const name = playerInput.value.trim();
    if (name && !gameState.players.includes(name)) {
        gameState.players.push(name);
        gameState.scores[name] = 0;
        playerInput.value = '';
        renderPlayersList();
        updateStartButtonState();
    }
}

function removePlayer(player) {
    gameState.players = gameState.players.filter(p => p !== player);
    delete gameState.scores[player];
    renderPlayersList();
    updateStartButtonState();
}

function renderPlayersList() {
    playersList.innerHTML = '';
    gameState.players.forEach(player => {
        const playerItem = document.createElement('div');
        playerItem.className = 'player-item';
        playerItem.innerHTML = `
            <span class="player-name">${player}</span>
            <button class="remove-btn" onclick="removePlayer('${player}')">ร</button>
        `;
        playersList.appendChild(playerItem);
    });
}

function updateStartButtonState() {
    startGameBtn.disabled = gameState.players.length < 2;
}

function getRandomQuestion() {
    const allTypes = Object.keys(questions);
    const availableQuestions = [];
    
    allTypes.forEach(type => {
        questions[type].forEach(question => {
            if (!gameState.usedQuestions.includes(question)) {
                availableQuestions.push({ question, type });
            }
        });
    });

    if (availableQuestions.length === 0) {
        gameState.usedQuestions = [];
        return getRandomQuestion();
    }

    const randomIndex = Math.floor(Math.random() * availableQuestions.length);
    return availableQuestions[randomIndex];
}

function getRandomPlayer() {
    const randomIndex = Math.floor(Math.random() * gameState.players.length);
    return gameState.players[randomIndex];
}

function startNextRound() {
    if (gameState.players.length < 2) {
        alert('ูุฌุจ ุฅุถุงูุฉ ูุงุนุจูู ุนูู ุงูุฃูู ูุจุฏุก ุงููุนุจุฉ');
        return;
    }

    const questionData = getRandomQuestion();
    const selectedPlayer = getRandomPlayer();
    
    gameState.currentQuestion = questionData;
    gameState.currentPlayer = selectedPlayer;
    gameState.usedQuestions.push(questionData.question);
    gameState.gameStarted = true;
    
    // Update UI
    setupPhase.style.display = 'none';
    gamePhase.style.display = 'block';
    
    renderQuestion();
    renderScores();
}

function renderQuestion() {
    const { type } = gameState.currentQuestion;
    const typeInfo = questionTypes[type];
    
    questionTypeContainer.innerHTML = `
        <div class="question-icon ${typeInfo.color}">
            ${typeInfo.icon}
        </div>
        <p class="question-type-label">${typeInfo.name}</p>
    `;
    
    questionText.textContent = gameState.currentQuestion.question;
    currentPlayer.textContent = `๐ฏ ${gameState.currentPlayer}`;
}

function renderScores() {
    scoresContainer.innerHTML = '';
    Object.entries(gameState.scores).forEach(([player, score]) => {
        const scoreItem = document.createElement('div');
        scoreItem.className = 'score-item';
        scoreItem.innerHTML = `
            <p class="score-name">${player}</p>
            <p class="score-value">${score}</p>
        `;
        scoresContainer.appendChild(scoreItem);
    });
}

function markAnswered() {
    gameState.scores[gameState.currentPlayer]++;
    startNextRound();
}

function resetGame() {
    gameState.gameStarted = false;
    gameState.currentQuestion = null;
    gameState.currentPlayer = null;
    gameState.usedQuestions = [];
    
    // Reset scores to zero
    Object.keys(gameState.scores).forEach(player => {
        gameState.scores[player] = 0;
    });
    
    // Update UI
    setupPhase.style.display = 'block';
    gamePhase.style.display = 'none';
}

function handleKeyPress(e) {
    if (e.key === 'Enter') {
        addPlayer();
    }
}
